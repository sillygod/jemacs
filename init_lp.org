#+TITLE: Init.el
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* make exec-path is matched from the shell's PATH

  #+begin_src emacs-lisp
    ;;; mycraft --- Summary  -*- lexical-binding: t; -*-
    ;;; Copyright (C) 2020 mycraft maintainers
    ;;; Author: Jing
    ;;; package --- mycraft
    ;;; Commentary:

    ;;; Code:

    (defun do-something (process signal)
      (when (memq (process-status process) '(exit signal))
        (let* ((buf (process-buffer process))
               (content (with-current-buffer buf
                          (buffer-substring-no-properties (point-min) (point-max))))
               (path-from-shell (replace-regexp-in-string
                                 "[ \t\n]*" ""
                                 content)))

          (setenv "PATH" path-from-shell)
          (setq exec-path (split-string path-from-shell path-separator)))

        (shell-command-sentinel process signal)))


    (add-hook 'emacs-startup-hook
              #'(lambda ()

                  (let* ((display-buffer-alist '(("*my async shell command*" display-buffer-no-window)))
                         (output-buffer (generate-new-buffer "*my async shell command*"))
                         (proc (progn
                                 (async-shell-command "/bin/bash --login -c 'echo $PATH'" output-buffer)
                                 (get-buffer-process output-buffer))))
                    (if (process-live-p proc)
                        (set-process-sentinel proc #'do-something)
                      (message "No process running.")))))

  #+end_src

* set up where the packages to be installed
  #+begin_src emacs-lisp
    (setq package-user-dir (concat user-emacs-directory "/" "elpa"))
    (setq mc/list-file (concat user-emacs-directory "/" "mc-lists.el"))
    (setq auto-save-list-file-prefix
          (concat
           (expand-file-name "auto-save-list" user-emacs-directory)
           "/.saves-"))
  #+end_src

* add modules and core to the load path

  #+begin_src emacs-lisp
    (add-to-list 'load-path (expand-file-name "modules" home-dir))
    (add-to-list 'load-path (expand-file-name "core" home-dir))
  #+end_src

* loading core settings

  #+begin_src emacs-lisp
    (require 'jemacs-ui)
    (require 'jemacs-package)
    (require 'jemacs-core)
    (require 'jemacs-ux)

    (when (file-exists-p jemacs-settings-file)
      (load jemacs-settings-file nil 'nomessage))

  #+end_src
