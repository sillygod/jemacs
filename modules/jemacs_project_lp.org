#+TITLE: jemacs-project.el
#+PROPERTY: header-args:emacs-lisp :tangle ./jemacs-project.el :mkdirp yes

* setup

  #+begin_src emacs-lisp
    ;;; mycraft --- Summary  -*- lexical-binding: t; -*-
    ;;; Copyright (C) 2020 mycraft maintainers
    ;;; Author: Jing
    ;;; package --- mycraft
    ;;; Commentary:

    ;;; Code:


  #+end_src

* perspective mode
  a workspace manager
  #+begin_src emacs-lisp
    (use-package perspective
      :commands (persp-switch persp-names)
      :custom
      (persp-modestring-short t)
      :config
      (persp-mode))
  #+end_src

* project.el

  try to replace the projectile with built-in =project.el=

  #+begin_src emacs-lisp
    (cl-defmethod project-root ((project (head local)))
      (cadr project))

    (cl-defmethod project-files ((project (head local)) &optional dirs)
      (mapcan
       (lambda (dir)
         (project--files-in-directory dir
                                      (project--dir-ignores project dir)))
       (or dirs
           (list (project-root project)))))

    (defun project-try-no-vc-local (dir)
      "Determine if DIR is a non-Git project."
      (catch 'ret
      (let ((pr-flags '((".project")
                        ("go.mod" "Cargo.toml" "project.clj" "pom.xml" "package.json" "pyproject.toml") ;; higher priority
                        ("Makefile" "README.org" "readme.org" "README.md"))))
        (dolist (current-level pr-flags)
          (dolist (f current-level)
            (when-let ((root (locate-dominating-file dir f)))
              (throw 'ret (list 'local root))))))))

    (defun project-try-local (dir)
      "Determine if DIR is a non-Git project."
      (catch 'ret
        (let ((pr-flags '((".project")
                          ("go.mod" "Cargo.toml" "project.clj" "pom.xml" "package.json" "pyproject.toml") ;; higher priority
                          ("Makefile" "README.org" "readme.org" "README.md"))))
          (dolist (current-level pr-flags)
            (dolist (f current-level)
              (when-let ((root (locate-dominating-file dir f)))
                (throw 'ret (list 'vc 'Git root))))))))

    (setq project-find-functions '(project-try-local project-try-vc))

    (defun consult-switch-project ()
      "Switch project with consult interface"
      (interactive)
      (let* ((candidates (project-known-project-roots))
             (proj (project-current t (consult--read
                                       candidates
                                       :prompt "Switch to project: "
                                       :sort nil
                                       :category 'file
                                       :require-match t)))
             (dname (file-name-nondirectory (directory-file-name (file-name-directory (project-root proj))))))

        (if (or (member dname (persp-names))
                (y-or-n-p (format "create a new layer: %s" dname)))
            (persp-switch dname))
        (project-find-file-in
         nil
         (list (project-root proj))
         proj)))
  #+end_src

* vterm

  Failed to install vterm: https://melpa.org/packages/vterm-20200926.1215.tar: Not found
  =package-refresh-contents=

  Optional, you can send additional string and perform it after vterm open
  ex.
  #+begin_src emacs-lisp :tangle no
    (vterm-send-string "source ~/.bash_profile")
  #+end_src

  if you want to customize the vterm's font, you could add the settings below
  #+begin_src emacs-lisp :tangle no
    (add-hook #'(lambda ()
                  (set-face-attribute 'variable-pitch nil :font "Sarasa Mono SC")
                  (set (make-local-variable 'buffer-face-mode-face) 'variable-pitch)
                  (buffer-face-mode t)))
  #+end_src


  In order to preventing vterm scroll to the bottom, when you move cursor to other window.
  We have to call vterm-copy-mode before moving.
  We have to call it again when you moving back.
  NOTE: we still process hydra menu influence vterm

  I found another solution may be better.
  Manually enter vterm-copy-mode when activate evil mode.
  Enter the evil mode when mouse scrolls
  https://emacs.stackexchange.com/questions/2204/hook-that-indicates-when-the-cursor-has-been-moved-by-scrolling

  #+begin_src emacs-lisp :tangle no
    ;; deprecated I prevent manually activate these
    ;; (advice-add 'which-key--show-popup :before 'prevent-whichkey-interfere-vterm)
    ;; (advice-add 'hydra-show-hint :before 'prevent-hydra-interfere-vterm)
    ;; (advice-add 'vterm-mode :after 'toggle-vterm-copy-mode-when-window-selection-changed)
    (defun prevent-whichkey-interfere-vterm (act-popup-dim)
      (when (equal major-mode 'vterm-mode)
        (unless vterm-copy-mode
          (vterm-copy-mode))))

    (defun prevent-hydra-interfere-vterm (hint caller)
      (when (equal major-mode 'vterm-mode)
        (unless vterm-copy-mode
          (vterm-copy-mode))))


    (defun toggle-vterm-copy-mode-when-window-selection-changed ()
      "Prevent vterm auto scroll buffer to the bottom when
    moving cursor to other window."
      (add-hook
       'window-selection-change-functions
       #'(lambda (w)
           (if (equal (get-buffer-window) w)
               (vterm-copy-mode -1)
             (with-current-buffer (window-buffer w) (vterm-copy-mode))))
       nil t))

  #+end_src

  #+begin_src emacs-lisp
    (defun toggle-copy-mode-respect-to-model-state ()
      (interactive)
      (cond
       ((evil-emacs-state-p)
        (evil-normal-state)
        (call-interactively 'vterm-copy-mode))
       ((evil-normal-state-p)
        (evil-emacs-state)
        (call-interactively 'vterm-copy-mode))))


    (use-package vterm
      :after evil
      :defer t
      :custom
      (vterm-always-compile-module t)
      :init
      (setq vterm-timer-delay 0.01)
      (with-eval-after-load 'evil
        (evil-set-initial-state 'vterm-mode 'emacs))
      :config
      (define-key vterm-mode-map (kbd "<escape>") 'vterm-send-escape)
      (define-key vterm-mode-map (kbd "C-c C-z") 'vterm-send-C-z)
      (define-key vterm-mode-map (kbd "C-z") 'toggle-copy-mode-respect-to-model-state)
      (evil-define-key 'emacs 'vterm-mode-map (kbd "C-z") #'toggle-copy-mode-respect-to-model-state)
      (evil-define-key 'normal 'vterm-mode-map (kbd "C-z") #'toggle-copy-mode-respect-to-model-state))
  #+end_src


  #+begin_src emacs-lisp
    (use-package vterm-toggle
      :defer t)
  #+end_src

* project jump & comment
  #+begin_src emacs-lisp
    (defun comment-or-uncomment-lines (&optional arg)
      (interactive "p")
      (evilnc-comment-or-uncomment-lines arg))

    (defun jump-in-buffer ()
      "Jump in buffer with `consult-imenu' or `consult-org-heading' if in 'org-mode'."
      (interactive)
      (call-interactively
       (cond
        ((eq major-mode 'org-mode) 'consult-org-heading)
        (t 'consult-imenu))))

    (defmacro project-with-default-dir (dir &rest body)
      "Invoke in DIR the BODY."
      (declare (debug t) (indent 1))
      `(let ((default-directory ,dir))
         ,@body))



    (defun project-vterm-setup (major-mode)
      "Perform some setup instruction when spawning a new shell for certain mode."
      (cond
       ((member major-mode '(python-mode python-ts-mode)) (progn
                                                            (vterm-send-string "source $(poetry env info --path)/bin/activate")
                                                            (vterm-send-return)))))

    (defun project-run-vterm (&optional arg)
      "Invoke `vterm' in the project's root.

    Switch to the project specific term buffer if it already exists.
    Use a prefix argument ARG to indicate creation of a new process instead."
      (interactive "P")
      (let* ((mmode major-mode)
             (project (project-root (project-current t)))
             (buffer (format "*%s %s*" "vterm" project)))
        (unless (buffer-live-p (get-buffer buffer))
          (unless (require 'vterm nil 'noerror)
            (error "Package 'vterm' is not available"))
          (project-with-default-dir project
            (vterm-other-window buffer)
            (project-vterm-setup mmode)))
        (pop-to-buffer buffer)))

    (defun new-terminal ()
      "New a terminal in project root or the current directory."
      (interactive)
      (if (project-current nil)
          (project-run-vterm)
        (vterm-other-window)))

    (defun avy-jump-url ()
      "Use avy to go to url in the buffer."
      (interactive)
      (avy-jump "https?://"))
  #+end_src

* search relevant functions

  My customize search function
  org-fold-show-context-detail

  #+begin_src emacs-lisp
    (defun my-project-rg (&optional options)
      "Search the current project with rg and search under certarn directory
         if it's not in a project.

         OPTIONS, if non-nil, is a string containing additional options to
         be passed to rg. It is read from the minibuffer if the function
         is called with a prefix argument."
      (interactive)
      (let* ((search-directory (if (project-current nil)
                                   (project-root (project-current nil))
                                 (read-directory-name "Start from directory: ")))

             (default-directory search-directory)

             (initial-input (cond
                             ((use-region-p) (buffer-substring-no-properties (region-beginning) (region-end)))
                             ((not (has-jlight-matches-p))
                              (buffer-substring-no-properties (car (get-pointer)) (cdr (get-pointer))))
                             (t nil))))

        (when (region-active-p)
          (deactivate-mark))

        (consult-ripgrep search-directory initial-input)))

  #+end_src

* provide package

  #+begin_src emacs-lisp
    (provide 'jemacs-project)
    ;;; jemacs-project.el ends here
  #+end_src
