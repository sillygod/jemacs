#+TITLE: jemacs-python.el
#+PROPERTY: header-args:emacs-lisp :tangle ./jemacs-python.el :mkdirp yes

* setup

  #+begin_src emacs-lisp
    ;;; mycraft --- Summary  -*- lexical-binding: t; -*-
    ;;; Copyright (C) 2020 mycraft maintainers
    ;;; Author: Jing
    ;;; package --- mycraft
    ;;; Commentary:

    ;;; Code:


  #+end_src

* python mode

  This is a basic setup for python language.

  #+begin_src emacs-lisp
    (with-eval-after-load 'python
      (setq python-shell-interpreter "ipython"))

    ;; (use-package python-pytest
    ;;   :defer t
    ;;   :custom
    ;;   (python-pytest-confirm t))

    (defvar python-project-venv-plist nil
      "A property list to cache the project's virtualenv.")

    (defun python-find-project-root ()
      "Return the python project root with project.el. If not found,
    it supporse the project is handled by poetry so it will try to find the
    direcotry contains the pyproject.toml file. The final fallbakc will let
    you choose the root directory."
      (or (if-let* ((proj (project-current nil))
                    (project-root (project-root proj))) project-root)
          (locate-dominating-file default-directory "pyproject.toml")
          (if (y-or-n-p "do you want to set the project root manually?")
              (read-directory-name "select directory: "))))

    (defun python-detect-venv-tool ()
      "Detect which virtual environment tool is used in the current project.
    Checks for Poetry (via pyproject.toml or poetry command)
    or uv (via uv.lock or uv venv --show).
    Returns :poetry, :uv, or nil if neither is detected."
      (when-let ((root (python-find-project-root)))
        (let ((default-directory root))
          (cond
           ;; Check for Poetry: look for pyproject.toml with [tool.poetry] or valid poetry env
           ((or (and (file-exists-p "pyproject.toml")
                     (with-temp-buffer
                       (insert-file-contents "pyproject.toml")
                       (re-search-forward "\\[tool\\.poetry\\]" nil t)))
                (let ((poetry-env (string-trim-right
                                   (shell-command-to-string "poetry env info -p 2>/dev/null"))))
                  (and (not (equal "" poetry-env)) (file-directory-p poetry-env))))
            :poetry)
           ;; Check for uv: look for uv.lock or valid uv venv
           ((file-exists-p "uv.lock")
            :uv)
           (t nil)))))

    (defun extract-python-version-from-pyproject-toml (file)
      "Extract Python version from a pyproject.toml file.
    Returns the Python version number as a string."
      (let ((python-version nil))
        (with-temp-buffer
          (insert-file-contents file)
          (goto-char (point-min))
          (while (re-search-forward "^python = \"\\([^\"]+\\)\"" nil t)
            (setq python-version (match-string 1)))
          python-version)))

    (defun consult-pyenv-install-version ()
      "Read the candidates from the pyenv install -l and return the one choosed."
      ;; command-shell-to-string and convert the result to a list!
       (let ((versions (cdr (split-string (shell-command-to-string "pyenv install -l") "\n" t "\s+"))))
       (consult--read
         versions
         :prompt "Choose the version want to install: "
         :sort nil
         :require-match t)))

    (defun python-get-uv-lock-venv-path ()
      "Extract the virtual environment path from the 'virtual' field in uv.lock.
    Looks for 'source = { virtual = \"xxx\" }' in the [package] section.
    Returns the absolute path to the virtual environment or nil if not found."
      (when-let ((root (python-find-project-root))
                 (uv-lock-file (expand-file-name "uv.lock" root)))
        (when (file-exists-p uv-lock-file)
          (with-temp-buffer
            (insert-file-contents uv-lock-file)
            (goto-char (point-min))
            ;; Search for [package] section
            ;; Search for source = { virtual = "xxx" } within the section
            (when (re-search-forward "source = { virtual = \"\\([^\"]+\\)\" }" nil t)
              (let ((venv-path (match-string 1)))
                ;; Resolve relative path against project root
                (if (equal venv-path ".")
                    (expand-file-name ".venv" root)
                  (expand-file-name venv-path root))))))))

    (defun python-vterm-setup-string ()
      "Return the command to active python virtualenv for the vterm."
      (let ((tool (python-detect-venv-tool)))
        (cond
         ((equal tool :uv) (concat "source " (python-get-uv-lock-venv-path) "/bin/activate"))
          ((equal tool :poetry) "source $(poetry env info --path)/bin/activate")
          (t nil))))

    (defun decide-python-version ()
      "extract the python version defined in the pyproject.toml or ask to input the python
    version."
      (or
       (if-let ((folder (locate-dominating-file default-directory "pyproject.toml"))
                (project-toml (expand-file-name "pyproject.toml" folder)))
           (extract-python-version-from-pyproject-toml project-toml))
       (consult-pyenv-install-version)))

    (defun pyenv-ensure-version (version)
      (let ((message (string-trim-right (shell-command-to-string (concat "pyenv local " version)))))
        (when (string-match (regexp-quote "not installed") message)
          (shell-command-to-string (concat "pyenv install " version))
          (pyenv-ensure-version version))
        version))

    (defun python-initialize-virtualenv ()
      (let ((venv (string-trim-right (shell-command-to-string "poetry env info -p"))))
        (when (equal venv "")
          (let ((py-version (decide-python-version)))
            (if (<= ?0 (string-to-char (substring py-version 0 1)) ?9)
              (pyenv-ensure-version py-version)
              (pyenv-ensure-version (substring py-version 1 nil)))
            (shell-command-to-string "poetry env use $(pyenv which python)")
          ))))


    (defun python-find-virtualenv ()
      "Return the virtualenv path with current project.
    First, check if there is a .venv directory exists. If not found,
    try to find the virtualenv with the poetry info -p
    "
      (when-let* ((root (python-find-project-root))
                  (proot (intern (format ":%s" root))))
        (or (plist-get python-project-venv-plist proot)
            (when-let ((venv (concat root ".venv"))
                       (_ (file-directory-p venv)))
              (setq python-project-venv-plist (plist-put python-project-venv-plist proot venv))
              venv)
            (let* ((default-directory root)
                   (venv (string-trim-right (shell-command-to-string "poetry env info -p"))))
              (setq python-project-venv-plist (plist-put python-project-venv-plist proot venv))
              venv))))

    (defun python-refind-virtualenv ()
      "works like `python-find-virtualenv' but it refresh the cache of venv-plist"
      (interactive)
      (when-let* ((root (python-find-project-root))
                  (proot (intern (format ":%s" root))))
        (plist-put python-project-venv-plist proot nil)
        (python-find-virtualenv)))

    (use-package pyvenv
      :commands (pyvenv-mode)
      :hook
      (python-mode . pyvenv-mode))

    (use-package pyimport
      :defer t
      :hook
      (before-save-hook . pyimport-remove-unused))

    (use-package cython-mode
      :defer t)
  #+end_src

* python relevant
  #+begin_src emacs-lisp
    (defvar python-run-command "python")
    (defvar python-run-args "")

    (defun workon-virtual-env-and-lsp ()
      (interactive)
      (pyvenv-activate (python-refind-virtualenv))
      (call-interactively 'eglot))

    ;; TODO: implement this one
    (defun my-run-python ()
      "Use vterm to run python shell instead.
         Furthermore, using ipython instead if it's installed."
      (interactive)

      ;; create a vterm buffer with python shell
      ;; maybe, I can reference from the python-inferior-mode

      (vterm-send-string (concat "source " (python-find-virtualenv) "/bin/activate"))
      (vterm-send-string "python")
      (vterm-send-return))

    (defun python-run-main ()
      (interactive)
      (shell-command
       (format (concat python-run-command " %s %s")
               (shell-quote-argument (or (file-remote-p (buffer-file-name (buffer-base-buffer)) 'localname)
                                         (buffer-file-name (buffer-base-buffer))))
               python-run-args)))
  #+end_src

* provide package

  #+begin_src emacs-lisp
    (provide 'jemacs-python)
    ;;; jemacs-python.el ends here
  #+end_src
