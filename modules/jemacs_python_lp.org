#+TITLE: jemacs-python.el
#+PROPERTY: header-args:emacs-lisp :tangle ./jemacs-python.el :mkdirp yes

* setup

  #+begin_src emacs-lisp
    ;;; mycraft --- Summary  -*- lexical-binding: t; -*-
    ;;; Copyright (C) 2020 mycraft maintainers
    ;;; Author: Jing
    ;;; package --- mycraft
    ;;; Commentary:

    ;;; Code:


  #+end_src

* python mode

  This is a basic setup for python language.

  #+begin_src emacs-lisp
    (with-eval-after-load 'python
      (setq python-shell-interpreter "ipython"))

    ;; (use-package python-pytest
    ;;   :defer t
    ;;   :custom
    ;;   (python-pytest-confirm t))

    (defvar python-project-venv-plist nil
      "A property list to cache the project's virtualenv.")

    (defun python-find-project-root ()
      "Return the python project root with project.el. If not found,
    it supporse the project is handled by poetry so it will try to find the
    direcotry contains the pyproject.toml file. The final fallbakc will let
    you choose the root directory."
      (or (if-let* ((proj (project-current nil))
                    (project-root (project-root proj))) project-root)
          (locate-dominating-file default-directory "pyproject.toml")
          (if (y-or-n-p "do you want to set the project root manually?")
              (read-directory-name "select directory: "))))


    (defun python-find-virtualenv ()
      "Return the virtualenv path with current project.
    First, check if there is a .venv directory exists. If not found,
    try to find the virtualenv with the poetry info -p
    "
      (when-let* ((root (python-find-project-root))
                  (proot (intern (format ":%s" root))))
        (or (plist-get python-project-venv-plist proot)
            (when-let ((venv (concat root ".venv"))
                       (_ (file-directory-p venv)))
              (setq python-project-venv-plist (plist-put python-project-venv-plist proot venv))
              venv)
            (let* ((default-directory root)
                   (venv (string-trim-right (shell-command-to-string "poetry env info -p"))))
              (setq python-project-venv-plist (plist-put python-project-venv-plist proot venv))
              venv))))

    (defun python-refind-virtualenv ()
      "works like `python-find-virtualenv' but it refresh the cache of venv-plist"
      (interactive)
      (when-let* ((root (python-find-project-root))
                  (proot (intern (format ":%s" root))))
        (plist-put python-project-venv-plist proot nil)
        (python-find-virtualenv)))

    (use-package pyvenv
      :commands (pyvenv-mode)
      :hook
      (python-mode . pyvenv-mode))

    (use-package pyimport
      :defer t
      :hook
      (before-save-hook . pyimport-remove-unused))

    (use-package cython-mode
      :defer t)
  #+end_src

* python relevant
  #+begin_src emacs-lisp
    (defvar python-run-command "python")
    (defvar python-run-args "")

    (defun workon-virtual-env-and-lsp ()
      (interactive)
      (pyvenv-activate (python-refind-virtualenv))
      (call-interactively 'eglot))

    ;; TODO: implement this one
    (defun my-run-python ()
      "Use vterm to run python shell instead.
         Furthermore, using ipython instead if it's installed."
      (interactive)

      ;; create a vterm buffer with python shell
      ;; maybe, I can reference from the python-inferior-mode

      (vterm-send-string (concat "source " (python-find-virtualenv) "/bin/activate"))
      (vterm-send-string "python")
      (vterm-send-return))

    (defun python-run-main ()
      (interactive)
      (shell-command
       (format (concat python-run-command " %s %s")
               (shell-quote-argument (or (file-remote-p (buffer-file-name (buffer-base-buffer)) 'localname)
                                         (buffer-file-name (buffer-base-buffer))))
               python-run-args)))
  #+end_src

* provide package

  #+begin_src emacs-lisp
    (provide 'jemacs-python)
    ;;; jemacs-python.el ends here
  #+end_src
