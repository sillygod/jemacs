* Configurations

  A literal programming for my own emacs configs.

** prerequisite

*** some util tools
    #+begin_src sh
      curl -Ls https://raw.githubusercontent.com/daipeihust/im-select/master/install_mac.sh | sh
      brew install ispell pngpaste
    #+end_src

*** install emacs-plus

    #+begin_src sh
      brew install emacs-plus@28 --with-xwidgets --with-modern-papirus-icon --with-native-comp
    #+end_src

* Start to build my own emacs

  Wow almost complete :)

** things needed to be done or enahnced

   - [X] add run test for go mode
   - [ ] doom modeline is so slow after updating (cause flashing with which-key, auto highlight)
   - [ ] wirte a hydra for iedit mode
   - [ ] https://github.com/emacs-lsp/lsp-mode/issues/1863 (try this if you want to use pylance instead of pyright)
   - [ ] toggle window maximum should be memorized with projectile (https://oremacs.com/2016/06/27/ivy-push-view/)
   - [ ] check devdocs' functionality and pop-up with window-frame
   - [ ] implement my own run-python-shell
   - [ ] code folding problem (hideshow?) (lsp?)
   - [ ] [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/popup][window management (doom emacs)]] or consider [[https://github.com/bmag/emacs-purpose][this package]]
   - [ ] https://github.com/techniumlabs/ecloud/blob/master/gcp-overview.el
   - [ ] https://github.com/NicolasPetton/Indium (consider to add this package)
   - [ ] [[https://github.com/syl20bnr/spacemacs/blob/develop/layers/%2Bmisc/multiple-cursors/packages.el][integration for multiple cursor from spacemacs]]
   - [ ] add continuous integration for this emacs literate programming setup (but how to test?)

** program relavant config

   - [ ] implement a function that lsp auto reload when poetry venv toggle
   - [ ] a better go to definition handler
   - [ ] how to copy in the xwidget mode with evil yank
   - [ ] add re builder mode shorcuts

** better to have

   - [ ] a startup dashboard ([[https://github.com/rougier/nano-emacs/blob/master/nano-splash.el][reference]])
   - [ ] tree sitter (https://emacs-tree-sitter.github.io/)
   - [ ] add lookup function like doom emacs (which is based on counsel-search)
   - [ ] interactive sql mode
   - [ ] org roam v2 helper (create sub node)
   - [ ] spacemacs' org-doc-view mode?
   - [ ] https://github.com/osener/emacs-webkit-color-picker
   - [ ] https://github.com/quelpa/quelpa need this?
   - [ ] adopt darkroom package?
   - [ ] write a plugin to read some good blogs, articles from some website (ex. https://stackoverflow.blog/)
   - [ ] k8s editor mode https://github.com/TxGVNN/emacs-k8s-mode/blob/master/k8s-mode.el

** some questions

   - [X] to understand the source code of some implementation from =spacemacs=
   - [X] what does the =command= in the use-package do (make the command to be autoloaded)
   - [X] what is =featurep=

     #+begin_src bash
       emacs -Q --load init.el or
       /usr/local/opt/emacs-plus@28/bin/emacs -Q --load init.el # very similar with emacs-head
     #+end_src

* Notes

** some commands
*** list-colors-display
    這樣就可以知道當前所有的face，這樣要客製化會比較容易

*** list-faces-display
*** (load file nil (not init-file-debug))
    =load= will load repeatly when you call multiple times but =require= will only do once.
*** set vs setf vs setq vs setq-default

    Setq-default is globally set a variable( which is the default for buffer variable).

    #+begin_src emacs-lisp
      (set ls '(1 2 3 4)) => Error - ls has no value
      (set 'ls '(1 2 3 4)) => OK
      (setq ls '(1 2 3 4)) => OK - make ls to (quote ls) and then have the usual set
      (setf ls '(1 2 3 4)) => OK - same as setq so far BUT
      (setf (car ls) 10) => Makes ls '(10 2 3 4) - not duplicated by setq/set
    #+end_src

*** disable theme
    #+begin_src elisp
      (disable-theme)
    #+end_src

*** quote the func in the doc string will make it clickable in the documentation
    =`[functation name]'=

    #+begin_src elisp :tangle no
      (defun hi
          "you see `evil-lookup'")
    #+end_src

*** font-lock vs overlay

    https://github.com/wolray/symbol-overlay

*** normal-mode
    this can apply the local varaibles of the file or its directory.

*** add-file-local-variable
    generate the code for file local varaibles

*** elp-instrument-function, elp-results
    add the function you want to instrument.
    Run the functino you want to profiling then run =elp-results= to get the result.

** autoload

   It seems will start to work when calling =package-initialized= so when using =use-package= for local package it will not generate =xxx-autoloads.el=

   This needs more operation to make the autload working.

** use =esup= to profiling the emacs start up time
** use =what-cursor-position= to see the detail font-face under the cursor
   run this with universal args can get a more detail info.
** describe-face to know the detail properties of font-face
** ivy-minibuffer-map
   =M-o= can let you copy the text in minibuffer

** toggle-debug-on-error help to debug
** transient-state seems to be spaceamcs's own implementation
   behind the scene is =hydra=
   [[https://github.com/syl20bnr/spacemacs/blob/c7a103a772d808101d7635ec10f292ab9202d9ee/layers/%2Bspacemacs/spacemacs-completion/packages.el#L137][source code link]]

** helpful

   #+begin_quote
   you can search for Emacs functions within Emacs by typing M-x apropos, then typing your query. In this case, M-x apropos <RET> whitespace <RET> provides a list of functions relating to whitespace.
   #+end_quote

*** introspec the keybinding in the emacs
    https://emacs.stackexchange.com/questions/653/how-can-i-find-out-in-which-keymap-a-key-is-bound

** evil-collection

   Oh~ We can overwrite the original keymap by changing the kemap of the mode

   ex.
   #+begin_src elisp
     (setcdr
      (assq 'lispy-mode minor-mode-map-alist)
      lispy-mode-map)
   #+end_src

** Advice vs Hook
   https://www.emacswiki.org/emacs/AdviceVsHooks

** defcustom vs defvar
   Defcustom provide a more user-friendly customization with the built-in function =customize=.

** define-derived-mode
   We can define the major mode by this function.

** call-process
   What's the difference from the =shell-command=. =start-process= is aync.

   This will be freezed because the process will not stop.
   #+BEGIN_SRC elisp
     (let ((buffer "*test-git*"))
       (call-process "ping" nil buffer nil "google.com")
       (switch-to-buffer buffer))
   #+END_SRC


   This will be ok.
   #+BEGIN_SRC elisp
     (let ((buffer "*test-git*"))
       (start-process "git" buffer "ping" "google.com")
       (switch-to-buffer buffer))
   #+END_SRC

   #+RESULTS:
   : #<buffer *test-git*>

** define transient function
   ref: https://www.youtube.com/watch?v=w3krYEeqnyk&feature=youtu.be

*** basic transient
    #+begin_src elisp
      (defun just-echo ()
        (interactive)
        (message "hello"))

      (define-transient-command test-transient ()
        "This is the doc"
        ["Action"
         ("a" "Action a" just-echo)
         ("s" "Action a" just-echo)
         ("d" "Action a" just-echo)])

      (test-transient)
    #+end_src

    #+RESULTS:
    | transient--resume-which-key-mode |

*** transient with switches

    #+begin_src elisp
      (defun just-echo (&optional args)
        (interactive (list (transient-args 'test-transient)))
        (message "args: %s" args))

      (define-transient-command test-transient ()
        "This is the doc"
        ["Arguments"
         ("-s" "Switch" "--switch")
         ("-a" "Annotate" "--annotate")]
        ["Action"
         ("a" "Action a" just-echo)
         ("s" "Action a" just-echo)
         ("d" "Action a" just-echo)])

      (test-transient)
    #+end_src

    #+RESULTS:
    | transient--resume-which-key-mode |

*** transient with params

    #+begin_src elisp
      (defun just-echo (&optional args)
        (interactive (list (transient-args 'test-transient)))
        (message "args: %s" args))

      (define-infix-argument test-transient:--message ()
        :description "Messages"
        :class 'transient-option
        :shortarg "-m"
        :argument "--message=")

      (define-transient-command test-transient ()
        "This is the doc"
        ["Arguments"
         ("-s" "Switch" "--switch")
         ("-a" "Annotate" "--annotate")
         (test-transient:--message)]
        ["Action"
         ("a" "Action a" just-echo)
         ("s" "Action a" just-echo)
         ("d" "Action a" just-echo)])

      (test-transient)

    #+end_src

    #+RESULTS:
    | transient--resume-which-key-mode |

** how to define a keymap for a certain mode

   #+begin_src elisp
     ;; example
     (defvar xx-mode-map
       (let ((map (make-sparse-keymap)))
         (define-key map (kbd "l") 'kubernete-transient) map))
   #+end_src

** something
   #+begin_src emacs-lisp
     (with-selected-window (next-window)
       (org-element-parse-buffer))
   #+end_src

** to see the visualization of git history

   #+begin_src sh
     docker run --rm -p 8080:80 --name envisaged -v /Users/jing/Desktop/spacemacs-private/:/visualization/git_repo:ro -e GOURCE_TITLE="spacemacs private" utensils/envisaged
   #+end_src

** display buffer with customize position and width

   - display-buffer-fallback-function

   #+begin_src emacs-lisp
     (display-buffer "*scratch*"
                     '(display-buffer-in-side-window . ((side . right))))
   #+end_src

   #+begin_src emacs-lisp
     (add-to-list 'display-buffer-alist
                  '("\\*org-roam\\*"
                    (display-buffer-in-direction)
                    (direction . right)
                    (window-width . 0.33)
                    (window-height . fit-window-to-buffer)))
   #+end_src

* Reference

** dotfiles

   - https://github.com/mwfogleman/.emacs.d/blob/master/michael.org#hideshow
   - https://github.com/mpereira/.emacs.d#a-fast-non-projectile-based-project-file-finder
   - https://github.com/daviwil/dotfiles
   - https://laptrinhx.com/evil-emacs-configuration-1977138996/
   - https://github.com/lccambiaghi/.doom.d
   - https://github.com/jschaf/dotfiles/blob/master/emacs/start.el
   - https://github.com/raxod502/radian/tree/develop/emacs
   - https://github.com/p3r7/awesome-elisp
   - https://protesilaos.com/dotemacs/
   - https://github.com/alhassy/emacs.d/blob/master/README.org
   - https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org
   - https://github.com/hungyiloo/doom-emacs-conf/tree/master/autoload (簡單版的可以參考)

** literate programming

   - https://www.cs.tufts.edu/~nr/noweb/ (literate programming)
   - https://www-cs-faculty.stanford.edu/~knuth/cweb.html (literate programming)
   - http://www.literateprogramming.com/knuthweb.pdf (paper about leterate programming)
   - https://soliloquium.zealmaker.com/fastpages/orgmode/2020/04/27/blogging-with-orgmode-and-fastpages
   - https://leanpub.com/lit-config/read#leanpub-auto-multiple-config-files-per-org-file

** misc

   - https://github.com/sulami/literate-calc-mode.el
   - https://github.com/jerrypnz/major-mode-hydra.el (pretty hydra)
   - https://github.com/clemera/objed (interesting..)
   - https://github.com/daipeihust/im-select (combine this with evil mode)
   - https://leanpub.com/lit-config/read
   - https://github.com/wbolster/emacs-direnv
   - http://ergoemacs.org/emacs/emacs.html
   - https://github.com/storvik/gomacro-mode (there are usages about emacs on ci)
   - autothemer
   - https://www.gnu.org/software/hyperbole/#summary
   - https://www.deepl.com/translator (dictionary)
