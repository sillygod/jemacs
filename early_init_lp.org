#+TITLE: Early-init.el
#+PROPERTY: header-args:emacs-lisp :tangle ./early-init.el :mkdirp yes

* What is this

  Emacs can be configured using an early init file (early-init.el).
  It's expected to be located under the =user-emacs-directory= and it's loaded very early in the startup process.

  before the graphical elements such as tool bar, the package manager is initialized and before loading the site files

  =both doom emacs and spacemacs use this trick=
  https://github.com/hlissner/doom-emacs
  https://github.com/syl20bnr/spacemacs

* start crafting

  Put =-*- lexical-binding: t; -*-= in the beginning of the file. This way, we don't need to call =(setq lexical-binding t)=.
  tips for optimization https://github.com/nilcons/emacs-use-package-fast

  https://www.gnu.org/software/emacs/manual/html_node/eintr/debug_002don_002dentry.html
  another debug way

  #+begin_src emacs-lisp
    ;;; mycraft --- Summary  -*- lexical-binding: t; -*-
    ;;; Copyright (C) 2020 mycraft maintainers
    ;;; Author: Jing
    ;;; package --- mycraft
    ;;; Commentary:

    ;;; Code:

    ;; (toggle-debug-on-error) temporarily for debug usage

  #+end_src

* grow the garbage collection threshold when initialize
  this will make it high performance because of lower gc times.

  #+begin_src emacs-lisp
    (setq gc-cons-threshold 64000000)
    ;;(add-hook 'after-init-hook #'(lambda ()
    ;; restore after startup
    ;;                               (setq gc-cons-threshold 800000)))
  #+end_src

* splash buffer

   maybe, I can refer to a startup dashboard ([[https://github.com/rougier/nano-emacs/blob/master/nano-splash.el][reference]]) to improve my splash buffer

  #+begin_src emacs-lisp
    (defun pixel-width-to-char-width (pixel-width)
      (/ (* pixel-width (window-width)) (window-pixel-width)))

    (defun pixel-height-to-char-height (pixel-height)
      (/ (* pixel-height (window-height)) (window-pixel-height)))


    (defun show-splash-buffer ()
      "Show welcom buffer when startup."
      (require 'svg)
      (unless (get-buffer "*Splash*")
        (with-current-buffer (get-buffer-create "*Splash*")
          (let* ((truncate-lines t)
                 (mode-line-format nil)
                 (width 360)
                 (height 360)
                 (svg (svg-create width height))
                 (cursor-type nil)
                 (top-margin (floor (/ (- (window-height) (pixel-height-to-char-height height)) 2)))
                 (left-margin (floor (/ (- (window-width) (pixel-width-to-char-width width)) 2)))
                 (splash-message "Nice!"))
            (erase-buffer)
            (goto-char (point-min))
            (insert (make-string top-margin ?\n))
            (insert (make-string left-margin ?\ ))
            (svg-embed
             svg
             (expand-file-name "assets/jgebang.png" home-dir)
             "image/png" nil
             :width (format "%spx" width) :height (format "%spx" height))
            (svg-insert-image svg)
            (insert "\n\n")
            (insert (make-string (floor (/ (- (window-width) (string-width splash-message)) 2)) ?\ ))
            (insert splash-message)
            (setq-local evil-default-cursor '(ignore)) ;; without this, change cursor-type will not work when evil mode enabled.
            (setq-local cursor-type nil)
            ;; (setq-local evil-normal-state-cursor '(bar . 0)) this will affect the cursor-type
            (read-only-mode 1))))

      (switch-to-buffer (get-buffer "*Splash*")))



    (setq initial-scratch-message nil)
    (add-hook 'window-setup-hook (lambda ()
                                   (when (display-graphic-p)
                                     (show-splash-buffer))) t)

  #+end_src

* set up config home directory
  #+begin_src emacs-lisp
    (defvar home-dir (file-name-directory load-file-name))
    (setq user-emacs-directory (expand-file-name "emacs-home/" home-dir))
    (unless (file-exists-p user-emacs-directory)
      (mkdir user-emacs-directory t))

  #+end_src

* prevent redisplay before setup the ui

  #+begin_src emacs-lisp
    (setq-default inhibit-redisplay t
                  inhibit-message t)
    (add-hook 'window-setup-hook
              (lambda ()
                (setq-default inhibit-redisplay nil
                              inhibit-message nil)
                (redisplay)))
  #+end_src

* disable package enable at startup and some misc settings

  #+begin_src emacs-lisp :tangle no
     (setq package-install-upgrade-built-in t)
   #+end_src


  #+begin_src emacs-lisp
    (setq package-enable-at-startup nil)
    (setq load-prefer-newer noninteractive)
  #+end_src

* loading custom settings

  #+begin_src emacs-lisp
    (when (if (fboundp 'native-comp-available-p) (native-comp-available-p))
      (when (fboundp 'startup-redirect-eln-cache)
        ;; to make it automatically run startup--update-eln-cache
        ;; which will set the eln cache directory under the user-emcas-directory
        (setq startup--original-eln-load-path native-comp-eln-load-path)))

    (defvar jemacs-config-file (expand-file-name "config.el" home-dir))
    (defvar jemacs-settings-file (expand-file-name "settings.el" home-dir))
    (when (file-exists-p jemacs-config-file)
      (load jemacs-config-file nil 'nomessage))

  #+end_src

* UI adjustment

  *minimize ui interface*

  We can adjust the ui by setting the =default-frame-alist=. The following settings are found in the source code.

  | function             | frame-alist                            |
  |----------------------+----------------------------------------|
  | (scroll-bar-mode -1) | '(vertical-scroll-bars)                |
  | (menu-bar-mode -1)   | '(menu-bar-lines . 0)                  |
  | (tool-bar-mode -1)   | '(tool-bar-lines . 0)                  |
  | (set-fringe-mode 5)  | '(left-fringe . 5) '(right-fringe . 5) |
  | toggle-fullscreen    | '(fullscreen . maximized)              |


  #+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(vertical-scroll-bars))
    (add-to-list 'default-frame-alist '(menu-bar-lines . 0))
    (add-to-list 'default-frame-alist '(tool-bar-lines . 0))
    (add-to-list 'default-frame-alist '(left-fringe . 5))
    (add-to-list 'default-frame-alist '(right-fringe . 5))
    (add-to-list 'initial-frame-alist '(fullscreen . maximized))

    (add-to-list 'default-frame-alist '(font . "Source Code Pro-15"))
  #+end_src

* Font setup & config background color

  https://www.programmingfonts.org/
  this is a nice website to browse the font suitable for programming.

  #+begin_src emacs-lisp
    (defvar default-font-size 140)
    (set-face-attribute 'fixed-pitch nil :font "Source Code Pro" :height default-font-size)
    (set-face-attribute 'variable-pitch nil :font "Source Code Pro" :height default-font-size :weight 'regular)
  #+end_src

* Reference
  https://www.masteringemacs.org/article/whats-new-in-emacs-27-1
