#+TITLE: jemacs-core.el
#+PROPERTY: header-args:emacs-lisp :tangle ./jemacs-core.el :mkdirp yes

* Misc Behaviro setup

** setup

   #+begin_src emacs-lisp
     ;;; mycraft --- Summary  -*- lexical-binding: t; -*-
     ;;; Copyright (C) 2020 mycraft maintainers
     ;;; Author: Jing
     ;;; package --- mycraft
     ;;; Commentary:

     ;;; Code:


   #+end_src

** simplify the prompt =yes or no= to =y or n=

   fset can set symbol's function definition.

   ex.
   #+begin_example
     (fset 'abc #'(lambda () (message "hi")))
     (abc) ;; you can call it like function
     ;; You call not direct call it like this if you use (setq 'abc '...)
   #+end_example

   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p) ;; to simplify the yes or no input
   #+end_src

** show startup message and make all-the-icon not to impact performance
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
     (setq inhibit-compacting-font-caches t) ;; for all-the-icon slow issue
   #+end_src

** show column number in the modeline

   #+begin_src emacs-lisp
     (setq column-number-mode t)
   #+end_src

** disable backup file and disable tabs (always using space)
   #+begin_src emacs-lisp
     (setq make-backup-files nil)
     (setq-default indent-tabs-mode nil)
     (setq xwidget-webkit-enable-plugins t) ;; what does this impact?
   #+end_src

** set default indent width

   NOTE: If you use setq here, it will not works. To research why

   #+begin_src emacs-lisp
     (setq-default tab-width 4)
   #+end_src

** some settings for dired mode

   #+begin_src emacs-lisp
     (when (string= system-type "darwin")
       "In macos, ls doesn't support --dired option"
       (setq dired-use-ls-dired nil))
   #+end_src

   Make dired auto guess the path to rename
   When opening two buffer with dired mode, you will get pre-defined path for renaming.

   #+begin_src emacs-lisp
     (setq dired-dwim-target t)
   #+end_src

   Enable edit file's permissions in the wdired-mode

   #+begin_src emacs-lisp
     (setq wdired-allow-to-change-permissions t)
   #+end_src

   Make deleting the files in the dired by moving to trash instead of deleting directly.

   #+begin_src emacs-lisp
     (setq delete-by-moving-to-trash t)
   #+end_src

   If you want to extend the support compress method for dired mode, you can customize =dired-compress-files-alist= variable.
   press =Z= to uncompress

** avoid ffap-guesser freeze when find-file-thing-at-point

   This will happend when find-file under a url-like thing. It can disable ping the target url to avoid
   freezing.

   #+begin_src emacs-lisp
     (setq ffap-machine-p-known 'reject)
   #+end_src

** setup gpg

   #+begin_src emacs-lisp
     (setq epg-pinentry-mode 'loopback)
     (setq epa-file-encrypt-to '("sillygod"))
   #+end_src

** customize shell prompt way

   https://stackoverflow.com/questions/6411121/how-to-make-emacs-use-my-bashrc-file
   in order to make the shell to load source file
   this will cause a side effect to slow down projectile-project-file
   projectile-dir-files-alien
   issue: https://github.com/syl20bnr/spacemacs/issues/4207
   (setq shell-file-name "/bin/bash")
   (setq shell-command-switch "-ic")

   #+begin_src emacs-lisp
     (setq shell-command-switch "-c")
   #+end_src

** disable word wrap
   inspect the source of =(toggle-word-wrap 0)= and find set =word-wrap= to nil can
   achieve this function.

   #+begin_src emacs-lisp
     (setq word-wrap nil)
   #+end_src

** auto revert mode
   auto refresh when moving file or rename file in dired mode, reread buffer when the file is changed.

   #+begin_src emacs-lisp
     (global-auto-revert-mode t)
   #+end_src

** turn on global visual-line-mode

   #+begin_src emacs-lisp
     (global-visual-line-mode 1)
   #+end_src

** enable link in the comments can be click and highlight
   #+begin_src emacs-lisp
     (add-hook 'prog-mode-hook 'goto-address-prog-mode)
   #+end_src
** ensure program mode use space instead of tab

   #+begin_src emacs-lisp
     (add-hook 'prog-mode-hook #'(lambda () (setq indent-tabs-mode nil)))
   #+end_src

** delete trailing space when saving files
   #+begin_src emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+end_src

** ensure auto refresh buffer for dired mode
   #+begin_src emacs-lisp
     (add-hook 'dired-mode-hook 'auto-revert-mode)
   #+end_src

* Self defined helper functions

** go to dotfile
   #+begin_src emacs-lisp
     (defun my-find-dotfile ()
       "Edit the `dotfile', in the current window."
       (interactive)
       (find-file-existing (expand-file-name "settings.el" home-dir)))
   #+end_src
** an helper to detect os

   #+begin_src emacs-lisp
     (defun system-is-mac! ()
       (eq system-type 'darwin))

     (defun system-is-linux! ()
       (eq system-type 'gnu/linux))

     (defun system-is-windows ()
       (eq system-type 'windows-nt))
   #+end_src

** org tangle lp configs
   #+begin_src emacs-lisp
     (defvar emacs-path "/usr/local/bin/emacs")
     (defvar org-tangle-cmd (concat emacs-path " --batch --eval \"(require 'org)\" --eval \"(require 'ob-tangle)\" --eval '(find-file \"%s\")' --eval '(org-babel-tangle)'"))

     (defun export-lp-configs ()
       "walk through the emacs home dir and find the org files with
     suffix _lp. Then, before performing the function org-babel-tangle for every one of them,
     this will make sure the file is saved.
     "
       (interactive)
       (setq-local default-directory (directory-file-name home-dir))
       (let ((async-shell-command-buffer 'new-buffer)
             (display-buffer-alist
              '(("*my async shell command*" display-buffer-no-window)))
             (lp-files
              (split-string
               (shell-command-to-string (find-cmd '(name "*_lp.org")))
               "\n" t)))

         ;; iterate lp-files and check if saved and then perform org-babel-tangle for them
         (cl-loop for fname in lp-files
                  do (progn
                       (when (and (get-file-buffer fname)
                                  (buffer-modified-p (get-file-buffer fname)))
                         (message "%s is modified, forced to save." fname)
                         (with-current-buffer (get-file-buffer fname)
                           (save-buffer)))
                       (message "will perform %s" (format org-tangle-cmd fname))
                       (async-shell-command (format org-tangle-cmd fname) (get-buffer-create "*my async shell command*"))))))

   #+end_src

** a macro function helps measuring time consuming
   #+begin_src emacs-lisp
     (defmacro measure-time (&rest body)
       `(let ((time (current-time)))
          ,@body
          (message "%.06f s" (float-time (time-since time)))))


     (defun measure-org-babel-tangle ()
       "A simple wrap to measure org-babel-tangle."
       (interactive)
       (when (fboundp 'profiler-stop)
         (profiler-stop))
       (profiler-start 'cpu+mem)
       (setq temp emacs-lisp-mode-hook)
       (setq-default emacs-lisp-mode-hook nil)
       (measure-time (org-babel-tangle))
       (setq-default emacs-lisp-mode-hook temp)
       (profiler-report))

   #+end_src

** switch input method for evil mode

   *need to install the package [[https://github.com/daipeihust/im-select][im-select]]*
   TODO: refactor this auto switch input method function into another file.

   #+begin_src emacs-lisp :tangle no
     (defcustom im-exec "/usr/local/bin/im-select"
       "The im executable binary path."
       :type 'string)

     (defvar default-im "com.apple.keylayout.ABC"
       "Default English input method.")

     (defvar prev-im ""
       "previous input method.")

     (defvar current-im ""
       "Current input method.")

     (defun im-use-eng ()
       "Switch to english input method."
       (interactive)
       (cond ((and (string= system-type "darwin")
                   (not (string= current-im default-im)))
              (call-process-shell-command (concat im-exec " " default-im))
              (setq current-im default-im))))

     (defun im-remember ()
       "Remember the input method being used in insert mode."
       (interactive)
       (cond ((string= system-type "darwin")
              (setq prev-im (substring (shell-command-to-string im-exec) 0 -1))
              (setq current-im prev-im))))

     (defun im-use-prev ()
       "Change the input method to the previous one we remembered."
       (interactive)
       (cond ((string= system-type "darwin")
              (if prev-im
                  (progn
                    (call-process-shell-command (concat im-exec " " prev-im))
                    (setq current-im prev-im))
                (progn
                  (call-process-shell-command (concat im-exec " " default-im))
                  (setq current-im default-im))))))


     ;; TODO: find a way to handle this better
     ;; comment this because now we use emacs pinyin package to handle non english input method
     ;; no need to use im-select
     ;; (add-hook 'org-babel-pre-tangle-hook #'(lambda ()
     ;;                                          (setq-default evil-normal-state-entry-hook nil)
     ;;                                          (setq-default evil-insert-state-entry-hook nil)
     ;;                                          (setq-default evil-insert-state-exit-hook nil)
     ;;                                          (setq-default evil-emacs-state-entry-hook nil)))


     ;; (add-hook 'org-babel-post-tangle-hook #'(lambda ()
     ;;                                           (add-hook 'evil-normal-state-entry-hook 'im-use-eng)
     ;;                                           (add-hook 'evil-insert-state-entry-hook 'im-use-prev)
     ;;                                           (add-hook 'evil-insert-state-exit-hook 'im-remember)
     ;;                                           (add-hook 'evil-emacs-state-entry-hook 'im-use-eng)))

   #+end_src

** util helpers to be completed
   #+begin_src emacs-lisp
     ;; NOTE: borrow from spacemacs
     (defun show-hide-helm-or-ivy-prompt-msg (msg sec)
       "Show a MSG at the helm or ivy prompt for SEC. "
       (run-at-time
        0 nil
        #'(lambda (msg sec)
            (let* ((prev-prompt-contents
                    (buffer-substring (line-beginning-position)
                                      (line-end-position)))
                   (prev-prompt-contents-p
                    (not (string= prev-prompt-contents ""))))
              (when prev-prompt-contents-p
                (delete-region (line-beginning-position)
                               (line-end-position)))
              (insert (propertize msg 'face 'warning))
              ;; stop checking for candidates
              ;; and update the helm prompt
              (sit-for sec)
              (delete-region (line-beginning-position)
                             (line-end-position))
              (when prev-prompt-contents-p
                (insert prev-prompt-contents)
                ;; start checking for candidates
                ;; and update the helm prompt
                )))
        msg sec))

     ;; NOTE: borrow from spacemacs
     (defun rename-current-buffer-file (&optional arg)
       "Rename the current buffer and the file it is visiting.
     If the buffer isn't visiting a file, ask if it should
     be saved to a file, or just renamed.

     If called without a prefix argument, the prompt is
     initialized with the current directory instead of filename."
       (interactive "P")
       (let* ((old-short-name (buffer-name))
              (old-filename (buffer-file-name)))
         (if (and old-filename (file-exists-p old-filename))
             ;; the buffer is visiting a file
             (let* ((old-dir (file-name-directory old-filename))
                    (new-name (read-file-name "New name: " (if arg old-dir old-filename)))
                    (new-dir (file-name-directory new-name))
                    (new-short-name (file-name-nondirectory new-name))
                    (file-moved-p (not (string-equal new-dir old-dir)))
                    (file-renamed-p (not (string-equal new-short-name old-short-name))))
               (cond ((get-buffer new-name)
                      (error "A buffer named '%s' already exists!" new-name))
                     ((string-equal new-name old-filename)
                      (show-hide-helm-or-ivy-prompt-msg
                       "Rename failed! Same new and old name" 1.5)
                      (rename-current-buffer-file))
                     (t
                      (let ((old-directory (file-name-directory new-name)))
                        (when (and (not (file-exists-p old-directory))
                                   (yes-or-no-p
                                    (format "Create directory '%s'?" old-directory)))
                          (make-directory old-directory t)))
                      (rename-file old-filename new-name 1)
                      (rename-buffer new-name)
                      (set-visited-file-name new-name)
                      (set-buffer-modified-p nil)
                      (when (fboundp 'recentf-add-file)
                        (recentf-add-file new-name)
                        (recentf-remove-if-non-kept old-filename))

                      (message (cond ((and file-moved-p file-renamed-p)
                                      (concat "File Moved & Renamed\n"
                                              "From: " old-filename "\n"
                                              "To:   " new-name))
                                     (file-moved-p
                                      (concat "File Moved\n"
                                              "From: " old-filename "\n"
                                              "To:   " new-name))
                                     (file-renamed-p
                                      (concat "File Renamed\n"
                                              "From: " old-short-name "\n"
                                              "To:   " new-short-name)))))))
           ;; the buffer is not visiting a file
           (let ((key))
             (while (not (memq key '(?s ?r)))
               (setq key (read-key (propertize
                                    (format
                                     (concat "Buffer '%s' is not visiting a file: "
                                             "[s]ave to file or [r]ename buffer?")
                                     old-short-name)
                                    'face 'minibuffer-prompt)))
               (cond ((eq key ?s)            ; save to file
                      ;; this allows for saving a new empty (unmodified) buffer
                      (unless (buffer-modified-p) (set-buffer-modified-p t))
                      (save-buffer))
                     ((eq key ?r)            ; rename buffer
                      (let ((new-buffer-name (read-string "New buffer name: ")))
                        (while (get-buffer new-buffer-name)
                          ;; ask to rename again, if the new buffer name exists
                          (if (yes-or-no-p
                               (format (concat "A buffer named '%s' already exists: "
                                               "Rename again?")
                                       new-buffer-name))
                              (setq new-buffer-name (read-string "New buffer name: "))
                            (keyboard-quit)))
                        (rename-buffer new-buffer-name)
                        (message (concat "Buffer Renamed\n"
                                         "From: " old-short-name "\n"
                                         "To:   " new-buffer-name))))
                     ;; ?\a = C-g, ?\e = Esc and C-[
                     ((memq key '(?\a ?\e)) (keyboard-quit))))))))
   #+end_src

** my customize docker shell with vterm

   #+begin_src emacs-lisp
     (defun docker-container-vterm (container &optional read-shell)
       "Open `shell' in CONTAINER.  When READ-SHELL is not nil, ask the user for it."
       (interactive (list
                     (docker-container-read-name)
                     current-prefix-arg))
       (let* ((shell-file-name (docker-container--read-shell read-shell))
              (container-address (format "docker:%s:/" container))
              (file-prefix (let ((prefix (file-remote-p default-directory)))
                             (if prefix
                                 (format "%s|" (s-chop-suffix ":" prefix))
                               "/")))
              (default-directory (format "%s%s" file-prefix container-address)))
         (vterm-toggle-cd)))

     ;; (vterm-other-window (buffer-name (docker-generate-new-buffer "vterm" default-directory)))

   #+end_src

** start a new emacs instance
   https://www.gnu.org/software/emacs/manual/html_node/elisp/Command_002dLine-Arguments.html#index-command_002dline_002dargs
   how to get the argv

   #+begin_src emacs-lisp

     (defun restart-emacs-procedure ()
       (call-process "bash"
                     nil
                     nil
                     nil
                     "-c"
                     (concat
                      (elt command-line-args 0)
                      " &")))


     (defun restart-emacs ()
       "Kill the original instance and start a new emacs instance.
     However, have no idea how to get the original instance' starting command args
     sys.args?"
       (interactive)
       (add-to-list 'kill-emacs-hook #'restart-emacs-procedure)
       (print kill-emacs-hook)
       (save-buffers-kill-emacs))
   #+end_src

** text encoding decoding
   #+begin_src emacs-lisp
     (defun copy-region-and-base64-decode (start end)
       (interactive "r")
       (let ((x (base64-decode-string
                 (decode-coding-string
                  (buffer-substring start end) 'utf-8))))
         (kill-new x)))

     (defun my-encode-region-base64 (start end)
       (interactive "r")
       (let ((content (buffer-substring-no-properties start end)))
         (when (use-region-p)
           (delete-region start end)
           (insert (base64-encode-string (encode-coding-string content 'utf-8))))))

     (defun my-decode-region-base64 (start end)
       (interactive "r")
       (let ((content (buffer-substring-no-properties start end)))
         (when (use-region-p)
           (delete-region start end)
           (insert (base64-decode-string (decode-coding-string content 'utf-8))))))

     (defun copy-region-and-urlencode (start end)
       (interactive "r")
       (let ((x (url-hexify-string
                 (buffer-substring start end))))
         (kill-new x)))
   #+end_src

** misc

   #+begin_src emacs-lisp
     (defun hey-god (question)
       "Reduce distraction when you search the answer for the question.
                         Powered by the howdoi"
       (interactive "sAsk the god, you'll get it: ")
       (let ((buffer-name "*God's reply*")
             (exectuable-name "howdoi"))
         (with-output-to-temp-buffer buffer-name
           (shell-command (concat exectuable-name " " question)
                          buffer-name
                          "*Messages*")
           (pop-to-buffer buffer-name))))

     (defun now ()
       "Get the current time, In the future this will show a temp buffer
     with unix format, human readable and the weather info."
       (interactive)
       (message "now: %s \ntimestamp: %s" (format-time-string "%Y-%m-%d %H:%m:%S %z") (format-time-string "%s")))

     (defun evil-smart-doc-lookup ()
       "Run documentation lookup command specific to the major mode.
     Use command bound to `SPC m h h` if defined, otherwise fall back
     to `evil-lookup'"
       (interactive)
       (let ((binding (key-binding (kbd (concat "SPC" " mhh")))))

         (if (commandp binding)
             (call-interactively binding)
           (evil-lookup))))

     (defun org-mode-visual-fill ()
       "A beautiful word wrap effect."
       (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))
   #+end_src

** lsp define key helper
   #+begin_src emacs-lisp
     (defun define-leader-key-global (&rest MAPS)
       (let ((get-props (lambda () (list
                                    my-leader-def-prop
                                    my-leader-def-emacs-state-prop))))
         (dolist (prop (funcall get-props))
           (apply 'general-define-key
                  :states (plist-get prop ':states)
                  :prefix (symbol-value (plist-get prop ':key))
                  :keymaps 'override
                  MAPS))))
   #+end_src

   TODO: use evil-define-key instead. I don't know why
   it will cause overwrite key binding on other mode
   when binding with lsp-command-map (maybe, it is not a
   normal keymap)

   NOTE: evil-define-key can't used symbol of mode-map. It's different from the general.el

   ex.
   #+begin_src emacs-lisp :tangle no
     (evil-define-key 'normal python-mode-map (kbd "SPC m") lsp-command-map)
     (evil-define-key 'normal go-mode-map (kbd "SPC m") lsp-command-map)
   #+end_src


   still have no idea how =(which-key-add-major-mode-key-based-replacements mode key desc)=
   works?

   #+begin_src emacs-lisp
     (defun define-leader-key-map-for (mode-map &rest MAPS)
       "Define the leader key map for the specify mode.
     key desc binding."
       (let ((get-props (lambda () (list
                                    my-local-leader-def-emacs-state-prop
                                    my-local-leader-def-prop
                                    my-local-leader-def-alias-prop))))


         (dolist (prop (funcall get-props))

           (cl-loop
            for (key desc binding)
            on MAPS by #'cdddr
            do

            (let ((mode (intern (string-remove-suffix "-map" (symbol-name mode-map))))
                  (shortcut-key (concat (symbol-value (plist-get prop ':key)) key))
                  (shortcut (kbd (concat (symbol-value (plist-get prop ':key)) key)))
                  (sts (plist-get prop ':states)))

              (if (not (equal binding 'lsp-command-map))
                  (apply 'general-define-key
                         :states sts
                         :prefix (symbol-value (plist-get prop ':key))
                         :keymaps mode-map
                         (if (equal binding nil)
                             (list key (list :ignore t :which-key desc))
                           (list key (list binding :which-key desc))))


                ;; if using the lexcial binding, we need to add a wrap to
                ;; bind the varaibles
                ((lambda (sts kmap keybinding func)
                   (message "evil this fucking thing!!")
                   (print kmap)
                   (print sts)
                   (print keybinding)
                   (print func)
                   (evil-define-key sts kmap keybinding func))
                 sts mode-map
                 (kbd (symbol-value (plist-get prop ':key)))
                 binding)))))))
   #+end_src

** buffer, window manipulation
   #+begin_src emacs-lisp
     (defun switch-to-minibuffer-window ()
       "Switch to minibuffer window (if active)."
       (interactive)
       (when (active-minibuffer-window)
         (select-window (active-minibuffer-window))))

     (defun toggle-maximize-buffer ()
       "Maximize buffer."
       (interactive)
       (save-excursion
         (if (and (= 1 (length (window-list)))
                  (assoc ?_ register-alist))
             (jump-to-register ?_)
           (progn
             (window-configuration-to-register ?_)
             (delete-other-windows)))))

     (defun org-file-show-headings (org-file)
       (interactive)
       (find-file (expand-file-name org-file))
       (consult-org-heading)
       (org-overview)
       (org-reveal)
       (org-show-subtree)
       (forward-line))

     (defun buffer-untabify ()
       "Transfer all tab to spaces."
       (interactive)
       (mark-whole-buffer)
       (untabify (region-beginning) (region-end)))

     (defun new-empty-buffer ()
       "Create a new buffer called: untitled."
       (interactive)
       (let ((newbuf (generate-new-buffer "untitled")))

         ;; Prompt to save on `save-some-buffers' with positive PRED
         (with-current-buffer newbuf
           (setq-local buffer-offer-save t))
         ;; pass non-nil force-same-window to prevent `switch-to-buffer' from
         ;; displaying buffer in another window
         (switch-to-buffer newbuf nil 'force-same-window)))

     (defun rotate-windows-forward (count)
       "Rotate each window forwards.
                         A negative prefix argument rotates each window backwards.
                         Dedicated (locked) windows are left untouched."
       (interactive "p")
       (let* ((non-dedicated-windows (cl-remove-if 'window-dedicated-p (window-list)))
              (states (mapcar #'window-state-get non-dedicated-windows))
              (num-windows (length non-dedicated-windows))
              (step (+ num-windows count)))
         (if (< num-windows 2)
             (error "You can't rotate a single window!")
           (dotimes (i num-windows)
             (window-state-put
              (elt states i)
              (elt non-dedicated-windows (% (+ step i) num-windows)))))))


     (defun my-shrink-window (delta)
       "Shrink-window."
       (interactive "p")
       (shrink-window delta))

     (defun my-shrink-window-horizontally (delta)
       "Shrink-window."
       (interactive "p")
       (shrink-window delta t))


     (defun my-enlarge-window (delta)
       (interactive "p")
       (enlarge-window delta))

     (defun my-enlarge-window-horizontally (delta)
       (interactive "p")
       (enlarge-window delta t))

     (defun kill-this-buffer (&optional arg)
       "Kill the current buffer.
               ARG is an universal arg which will kill the window as well.
               If the universal prefix argument is used then kill also the window."
       (interactive "P")
       (if (window-minibuffer-p)
           (abort-recursive-edit)
         (if (equal '(4) arg)
             (kill-buffer-and-window)
           (kill-buffer))))

     (defun copy-file-path-with-lino ()
       (interactive)
       (let ((info (concat (dired-replace-in-string (getenv "HOME") "~" (buffer-file-name)) ":" (number-to-string (line-number-at-pos)))))
         (kill-new info)
         (message "copy %s to clipboard" info)))

     (defun copy-file-path ()
       "Copy and show the file path of the current buffer."
       (interactive)
       (if-let (file-path (get-file-path))
           (progn
             (kill-new file-path)
             (message "%s" file-path))
         (message "WARNING: Current buffer is not attached to a file!")))
   #+end_src

** file manipulation
   #+begin_src emacs-lisp
     (defun get-file-path ()
       "Retrieve the file path of the current buffer.

     Returns:
       - A string containing the file path in case of success.
       - `nil' in case the current buffer does not have a directory."
       (when-let (file-path (buffer-file-name))
         (file-truename file-path)))

   #+end_src

** emmet
   #+begin_src emacs-lisp
     (defun my-emmet-expand ()
       (interactive)
       (unless (if (bound-and-true-p yas-minor-mode)
                   (call-interactively 'emmet-expand-yas)
                 (call-interactively 'emmet-expand-line))
         (indent-for-tab-command)))
   #+end_src

** flycheck
   #+begin_src emacs-lisp
     (defun toggle-flycheck-error-list ()
       "Toggle flycheck's error list window.
     If the error list is visible, hide it.  Otherwise, show it."
       (interactive)
       (-if-let (window (flycheck-get-error-list-window))
           (quit-window nil window)
         (flycheck-list-errors)))
   #+end_src

** snippet
   #+begin_src emacs-lisp
     (defun load-yasnippet ()
       "Ensure yasnippet is enbled."
       (unless yas-global-mode (yas-global-mode 1))
       (yas-minor-mode 1))

     (defun insert-yas ()
       "Lazy load ivy-yasnippet."
       (interactive)
       (load-yasnippet)
       (call-interactively 'yas-insert-snippet))
   #+end_src

** xwidget relevant functions
   #+begin_src emacs-lisp
     (defun google-search-action (x)
       "Search for X.
               force to make new session without using the original session."
       (xwidget-webkit-browse-url
        (concat
         "https://www.google.com/search?q="
         (url-hexify-string x)) t))

     (defun search-request-data-google (data)
       (mapcar #'identity (aref data 1)))

     (defun search-function (input)
       "Create a request to a search engine with INPUT.
          Return 0 tells `ivy--exhibit' not to update the minibuffer.
          We update it in the callback with `ivy-update-candidates'."
       (search-request-data-google
        (request-response-data
         (request
           "http://suggestqueries.google.com/complete/search"
           :type "GET"
           :params (list
                    (cons "client" "firefox")
                    (cons "q" input))
           :parser 'json-read
           :sync t))))

     (defun wrap-to-consult-read (prog fn input)
       (append (if (listp prog) prog (list prog)) (funcall fn input)))

     (defun search-format (lines)
       (split-string lines " "))

     (defun google-search ()
       "Counsel-search with xwidget open url."
       (interactive)
       (require 'request)
       (require 'json)
       (let ((initial-input (cond
                             ((use-region-p) (buffer-substring-no-properties (region-beginning) (region-end)))
                             (t nil))))
         (google-search-action
          (consult--read
           (consult--async-command #'(lambda (input) (wrap-to-consult-read '("printf" "%s\n") #'search-function input)))
           :prompt "search: "
           :initial initial-input
           :preview-key nil
           :sort nil))))

     (defun url-join (&rest parts)
       (cl-reduce (lambda (a b)
                    (let ((a (string-remove-suffix "/" a))
                          (b (string-remove-prefix "/" b)))
                      (concat a "/" b)))
                  parts))

     (defun artifachub-search-action (repo-name pkg-name &optional kind)
       "kind=0 -> helm"
       (url-join "https://artifacthub.io/packages"
                 (cond
                  ((equal kind 0) "helm")
                  (t "helm"))
                 repo-name
                 pkg-name))

     (defun transform-artifacthub-response (data)
       "transform the response data of artifacthub to the completion read format."
       (mapcar #'(lambda (d)
                   (let* ((repository (assoc-default 'repository d))
                          (repo-name (assoc-default 'name repository))
                          (pkg-name (assoc-default 'name d)))
                     (format "%s-%s" repo-name pkg-name))) (cdar data)))

     (defun search-artifacthub-function (input)
       "search the input keyword on artifachub."
       (request-response-data
        (request
          "https://artifacthub.io/api/v1/packages/search"
          :type "GET"
          :params (list
                   (cons "ts_query_web" input)
                   (cons "facets" "false")
                   (cons "sort" "relevance")
                   (cons "limit" 10)
                   (cons "offset" 0))
          :parser 'json-read
          :sync t)))

     (defun open-with-xwidget-action (x dir)
       (xwidget-webkit-browse-url
        (url-encode-url (concat
                         "file://"
                         (expand-file-name x dir))) t))

     (with-eval-after-load 'consult
       (defun open-with-xwidget (&optional initial-input)
         "Open file with xwidget browse url."
         (interactive)
         (let* ((selected-dir (read-directory-name "select directory: "))
                (candidates (directory-files selected-dir)))
           (open-with-xwidget-action
            (consult--read
             candidates
             :prompt "Open file: ")
            selected-dir))))
   #+end_src


** operation with marked text

   #+begin_src emacs-lisp
     (defun send-text-and-move-to-project-vterm ()
       (interactive)
       (when (region-active-p)
         ;; get the mark content
         (let ((content (buffer-substring (region-beginning) (region-end))))
           (new-terminal)
           (deactivate-mark)
           (vterm-send-string content))))

   #+end_src

** perform the last command for vterm

   #+begin_src emacs-lisp
     (defun vterm-perform-last-command ()
       (interactive)
       (let ((bname (buffer-name)))
         (new-terminal)
         (vterm-send-up)
         (vterm-send-return)
         (pop-to-buffer bname t)))
   #+end_src

** yaml indent function
   #+begin_src emacs-lisp
     (defun my-yaml-indent-line ()
       "Indent the current line.
     The first time this command is used, the line will be indented to the
     maximum sensible indentation.  Each immediately subsequent usage will
     back-dent the line by `yaml-indent-offset' spaces.  On reaching column
     0, it will cycle back to the maximum sensible indentation."
       (interactive "*")
       (let ((ci (current-indentation))
             (cc (current-column))
             (need (yaml-compute-indentation)))
         (save-excursion
           (beginning-of-line)
           (delete-horizontal-space)
           (if (and (equal last-command this-command) (/= ci 0))
               (indent-to (* (/ (- ci 1) yaml-indent-offset) yaml-indent-offset))
             (indent-to need)))))
   #+end_src
** org roam helper

   #+begin_src emacs-lisp

     (defun org-roam-dailies-capture-and-goto-today (&optional goto)
       (interactive)
       (org-roam-dailies--capture (current-time) goto)
       (org-roam-dailies-capture-today t))

     (defun reload-dir-locals ()
       (interactive)
       (hack-dir-local-variables-non-file-buffer))

     (defun my-refresh-org-roam-db-cache ()
       (interactive)
       (reload-dir-locals)
       (org-roam-db-clear-all)
       (org-roam-db-sync))

     (defun my-org-roam-ui-open ()
       (interactive)
       (let ((org-roam-ui-browser-function (if (equal current-prefix-arg '(4))
                                               #'browse-url
                                             #'xwidget-webkit-browse-url)))
         (orui-open)))
   #+end_src

* provide package

  #+begin_src emacs-lisp
    (provide 'jemacs-core)
    ;;; jemacs-core.el ends here
  #+end_src
