#+TITLE: jemacs-ux.el
#+PROPERTY: header-args:emacs-lisp :tangle ./jemacs-ux.el :mkdirp yes


* setup
   #+begin_src emacs-lisp
     ;;; mycraft --- Summary  -*- lexical-binding: t; -*-
     ;;; Copyright (C) 2020 mycraft maintainers
     ;;; Author: Jing
     ;;; package --- mycraft
     ;;; Commentary:

     ;;; Code:


   #+end_src

* request

  #+begin_src emacs-lisp
    (use-package request
      :defer t)
  #+end_src

* some built-in package

  #+begin_src emacs-lisp

    (use-package emacs
      ;; when you want to customize something defined in C source code
      ;; put them here
      :custom
      (completion-ignore-case t) ;; make the completion case insensitive
      (read-buffer-completion-ignore-case t)
      (enable-recursive-minibuffers t))

    (use-package simple
      :straight (:type built-in)
      :custom
      ;; (read-extended-command-predicate #'command-completion-default-include-p))
      (read-extended-command-predicate nil))

  #+end_src

* consult & corfu & embark
  a nice article for comparison
  https://macowners.club/posts/from-ivy-to-vertico/

  consult is another completion package

  #+begin_src emacs-lisp
    (use-package consult
      :defer t
      :commands
      (consult--read)
      :custom
      (consult-async-min-input 2)
      (consult-async-input-throttle 0.1)
      (consult-async-input-debounce 0.0)
      (consult-async-refresh-delay 0.1)
      (consult-goto-line-numbers nil)
      (xref-show-xrefs-function #'consult-xref)
      (xref-show-definitions-function #'consult-xref)
      :bind (:map minibuffer-local-map
                  ("C-k" . vertico-previous)
                  ("C-j" . vertico-next)
                  ("C-r" . consult-history))
      :config
      (consult-customize
       consult-theme
       :preview-key '(:debounce 0.2 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-bookmark consult--source-recent-file
       consult--source-project-recent-file
       :preview-key '("C-l")))
  #+end_src


  #+begin_src emacs-lisp
    (defun embark-which-key-indicator ()
      "An embark indicator that displays keymaps using which-key.
    The which-key help message will show the type and value of the
    current target followed by an ellipsis if there are further
    targets."
      (lambda (&optional keymap targets prefix)
        (if (null keymap)
            (which-key--hide-popup-ignore-command)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if (cdr targets) "â€¦" "")))
           (if prefix
               (pcase (lookup-key keymap prefix 'accept-default)
                 ((and (pred keymapp) km) km)
                 (_ (key-binding prefix 'accept-default)))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (cdr binding))))))))

    (defun embark-hide-which-key-indicator (fn &rest args)
      "Hide the which-key indicator immediately when using the completing-read prompter."
      (which-key--hide-popup-ignore-command)
      (let ((embark-indicators
             (remq #'embark-which-key-indicator embark-indicators)))
          (apply fn args)))

    (use-package embark
      :bind
      (("C-c C-c" . embark-act)   ;; pick some comfortable binding
       ("C-;" . embark-dwim)      ;; good alternative: M-.
       ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

      :init
      ;; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)

      :config
      (delete 'embark-mixed-indicator embark-indicators)
      (add-to-list 'embark-indicators 'embark-which-key-indicator)
      (advice-add #'embark-completing-read-prompter
                  :around #'embark-hide-which-key-indicator)
      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none)))))

    ;; Consult users will also want the embark-consult package.
    (use-package embark-consult
      :after (embark consult)
      :demand t ; only necessary if you have the hook below
      ;; if you want to have consult previews as you move around an
      ;; auto-updating embark collect buffer
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))
  #+end_src

  #+begin_src emacs-lisp

    (defun my-company-transform (candidates)
      (print (string last-command-event))
      candidates)

    (setq company-transformers nil)

    (use-package orderless
      :custom
      (completion-styles '(orderless partial-completion))
      (completion-category-overrides '((file (styles basic partial-completion)))))
  #+end_src

  a package completion in buffer to replace the company package
  https://github.com/minad/corfu/wiki#example-configuration-with-flex

  #+begin_src emacs-lisp
    (defun corfu-insert-separator-or-complete ()
      (interactive)
      (pcase-let* ((`(,beg ,end . ,_) completion-in-region--data)
                   (str (buffer-substring-no-properties beg end))
                   (candidate (nth corfu--index corfu--candidates)))

        ;; (when (equal str candidate)
        ;;   (call-interactively 'corfu-insert)
        ;;   (insert " "))

        (if (not (derived-mode-p 'prog-mode))
            (call-interactively 'corfu-insert-separator)
          (progn
            (insert " ")
            (call-interactively 'corfu-quit)))))

    (use-package corfu
      :after evil
      :straight
      (:host github :repo "minad/corfu" :files ("*.el" "extensions/*.el"))
      :config
      (evil-make-overriding-map corfu-map)
      (advice-add 'corfu--setup :after 'evil-normalize-keymaps)
      (advice-add 'corfu--teardown :after 'evil-normalize-keymaps)
      :init
      (global-corfu-mode)
      :bind (:map corfu-map
                  ("C-j" . corfu-next)
                  ("C-k" . corfu-previous)
                  ("<escape>" . corfu-quit)
                  ("<tab>". corfu-insert)
                  ("SPC" . corfu-insert-separator-or-complete))

      :custom
      (corfu-auto t)
      (corfu-quit-no-match t)
      (corfu-on-exact-match nil)
      (corfu-scroll-margin 4)
      (corfu-min-width 90)
      (corfu-preselect-first t)
      (corfu-auto-delay 0.1)
      (corfu-auto-prefix 2))
  #+end_src

  #+begin_src emacs-lisp
    (use-package eldoc-box)
  #+end_src

  #+begin_src emacs-lisp
    (use-package kind-icon
      :after corfu
      :custom
      (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
      :config
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
  #+end_src

  #+begin_src emacs-lisp
    (use-package cape
      :init
      (add-to-list 'completion-at-point-functions #'cape-file)
      (add-to-list 'completion-at-point-functions #'cape-abbrev)
      (add-to-list 'completion-at-point-functions #'cape-symbol)
      (add-to-list 'completion-at-point-functions #'cape-dabbrev))
  #+end_src

  #+begin_src emacs-lisp
    (defun my-minibuffer-backward-kill (arg)
      "When minibuffer is completing a file name delete up to parent
    folder, otherwise delete a char"
      (interactive "p")
      (if minibuffer-completing-file-name
          (if (string-match-p "/." (minibuffer-contents))
              (zap-up-to-char (- arg) ?/)
            (delete-minibuffer-contents))
        (backward-delete-char arg)))

    (defun sort-prefix-first (candidates)
      (let ((candidates (vertico-sort-history-length-alpha candidates))
            (input (buffer-substring (minibuffer-prompt-end)
                                     (max (minibuffer-prompt-end) (point)))))
        (if (equal input "")
            candidates
          (nconc (seq-filter (lambda (x) (string-prefix-p (downcase input) (downcase x))) candidates)
                 (seq-remove (lambda (x) (string-prefix-p (downcase input) (downcase x))) candidates)))))

    (use-package vertico
      :custom
      (vertico-cycle nil)
      (vertico-sort-function #'sort-prefix-first)
      :straight
      (:host github :repo "minad/vertico" :files ("*.el" "extensions/*.el"))
      :bind (:map vertico-map
                  ("C-w" . my-minibuffer-backward-kill))
      :hook
      (rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
      (minibuffer-setup . vertico-repeat-save) ; Make sure vertico state is saved

      :init
      (vertico-mode))
  #+end_src

  #+begin_src emacs-lisp
    (use-package marginalia
      :init
      (marginalia-mode))
  #+end_src

* avy
  =(setq avy-background t)= will diminish the background to make the target clearly.

  #+begin_src emacs-lisp
    (use-package avy
      :defer t
      :config
      (setq avy-background t))

  #+end_src

* evil
  it's evil! provide you vim-like ux in emacs.

  #+begin_src emacs-lisp
    (defun show-error-or-doc ()
      "Show errors if flycheck detects errors existed or display the documentation."
      (interactive)
      (if (flycheck-overlay-errors-at (point))
          (flycheck-display-error-at-point)
        ;; flymake-show-buffer-diagnostics
        (eldoc-box-eglot-help-at-point)))

  #+end_src

  #+begin_src emacs-lisp
    (use-package evil
      :defer 0
      :custom
      (evil-want-C-i-jump nil)
      (evil-want-C-u-scroll t)
      (evil-want-integration t)
      (evil-want-keybinding nil) ;; this will cause some evil keybinding
      ;; of other modes not working when it's set to true
      (evil-goto-definition-functions '(evil-goto-definition-imenu
                                         evil-goto-definition-xref
                                         evil-goto-definition-semantic
                                         evil-goto-definition-search))
      :config
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-define-key 'normal prog-mode-map (kbd "C-j") 'evil-scroll-line-down)
      (evil-define-key 'normal prog-mode-map (kbd "C-k") 'evil-scroll-line-up)
      (evil-define-key 'normal prog-mode-map (kbd "g h") 'show-error-or-doc)
      (evil-define-key 'normal prog-mode-map (kbd "U") 'undo-redo)

      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'minibuffer-mode 'emacs)
      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'lisp-interaction-mode 'normal)
      (evil-mode 1))

          ;; (add-hook 'evil-normal-state-entry-hook 'im-use-eng)
          ;; (add-hook 'evil-insert-state-entry-hook 'im-use-prev)
          ;; (add-hook 'evil-insert-state-exit-hook 'im-remember)
          ;; (add-hook 'evil-emacs-state-entry-hook 'im-use-eng))
  #+end_src

  evil-matchit  make =%= to be able to jump to and back the tag
  evil-collection provides some pre-defined evil key binding for other-modes.

  #+begin_src emacs-lisp
    (use-package evil-matchit
      :after evil
      :config
      (global-evil-matchit-mode 1))

    (use-package evil-collection
      :after evil
      :config
      (delete 'wgrep evil-collection-mode-list)
      (delete 'vterm evil-collection-mode-list)
      (delete 'lispy evil-collection-mode-list)
      (delete 'ivy evil-collection-mode-list)
      (delete 'go-mode evil-collection-mode-list)
      (delete 'view evil-collection-mode-list)
      ;; this will bind a global esc key for minibuffer-keyboard-quit so I remove it.
      (setq evil-collection-company-use-tng nil)
      (add-hook 'evil-collection-setup-hook #'(lambda (_mode mode-keymaps &rest _rest)
                                                (when (eq _mode 'docker)
                                                  (evil-define-key 'normal 'docker-container-mode-map (kbd "b") 'docker-container-vterm))))
      (evil-collection-init))
  #+end_src

  evil-nerd-commenter provide the quick comment util functions.

  #+begin_src emacs-lisp
    (use-package evil-nerd-commenter
      :after evil
      :commands evilnc-comment-operator
      :init
      (define-key evil-normal-state-map "gc" 'evilnc-comment-operator))

    (use-package evil-surround
      :after evil
      :config
      (global-evil-surround-mode 1))
  #+end_src

* code folding
  now use ts-fold instead


* which key mode
  a friendly key shortcut hint.
  #+begin_src emacs-lisp
    (use-package which-key
      :defer 0
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.05)
      (which-key-mode 1))
  #+end_src

* expand-region
  a convenient selection expander.

  #+begin_src emacs-lisp
    (use-package expand-region
      :commands
      (er--expand-region-1)
      :defer t)
  #+end_src

* company
  company-mode setup

  #+begin_notes
  "<return>" is the Return key while emacs runs in a graphical user interface.
  "RET" is the Return key while emacs runs in a terminal. ...
  But the problem is, by binding (kbd "RET") , you are also binding (kbd "C-m")
  #+end_notes

  #+begin_src emacs-lisp
    (use-package company
      :defer 0
      :config
      (setq company-minimum-prefix-length 2)
      (setq company-idle-delay 0.1)
      (setq company-format-margin-function 'company-vscode-dark-icons-margin)
      ;; In evil-collection, it adjust the key binding for the company-mode
      ;; NOTE: Furthermore, it also disable the pre-select behavior when
      ;; showing the completion candidates.
      (define-key company-active-map (kbd "<return>") 'company-complete-selection))
      ;; (global-company-mode 1))
  #+end_src

* provide package

  #+begin_src emacs-lisp
    (provide 'jemacs-ux)
    ;;; jemacs-ux.el ends here
  #+end_src
