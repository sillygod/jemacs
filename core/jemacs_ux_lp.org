#+TITLE: jemacs-ux.el
#+PROPERTY: header-args:emacs-lisp :tangle ./jemacs-ux.el :mkdirp yes


* setup
   #+begin_src emacs-lisp
     ;;; mycraft --- Summary  -*- lexical-binding: t; -*-
     ;;; Copyright (C) 2020 mycraft maintainers
     ;;; Author: Jing
     ;;; package --- mycraft
     ;;; Commentary:

     ;;; Code:


   #+end_src

* ivy & swiper & counsel

  =(setq ivy-use-selectable-prompt t)=
  to make the candidate you typed selectable. This is useful when you call =counsel-find-file=.
  Ex. You can choose the bar.yml when there is a candidate named barfar.yml

  =(setq ivy-initial-inputs-alist nil)=
  let the input in the ivy-minibuffer empty when opening the it.


  #+begin_src emacs-lisp
    (use-package ivy
      :ensure t
      :diminish
      :bind (:map ivy-minibuffer-map
                  ("TAB" . ivy-alt-done)
                  ("<escape>" . keyboard-escape-quit)
                  ("C-l" . ivy-alt-done)
                  ("C-j" . ivy-next-line)
                  ("C-k" . ivy-previous-line)
                  ("C-u" . ivy-backward-kill-word)
                  :map ivy-switch-buffer-map
                  ("C-k" . ivy-previous-line)
                  ("C-l" . ivy-done)
                  ("C-d" . ivy-switch-buffer-kill)
                  :map ivy-reverse-i-search-map
                  ("C-k" . ivy-previous-line)
                  ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1)
      (setq ivy-more-chars-alist '((t . 2))) ;; set the char limit when searching with ivy
      (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
      (setq ivy-use-selectable-prompt t)
      ;; (setq ivy-dynamic-exhibit-delay-ms 250)
      (setq ivy-initial-inputs-alist nil)
      (with-eval-after-load 'evil
        (define-key ivy-occur-grep-mode-map (kbd "w") nil)
        (evil-define-key 'normal ivy-occur-grep-mode-map
          (kbd "i")
          #'(lambda ()
              (interactive)
              (ivy-wgrep-change-to-wgrep-mode)
              (evil-insert-state)))))

    (use-package ivy-rich
      :after (ivy)
      :init
      (ivy-rich-mode 1))
  #+end_src

  After calling =swiper=, =counsel search=, ivy-occur (C-c C-o) will get all the candidates in another buffer.
  Then we can enter edit mode by ivy-wgrep-change-to-wgrep-mode (C-x C-q)

  Use =multiple-cursor= may be helpful here.
  Finally, =Ctrl-c Ctrl-c= to commit change
  there are some key binding in the swiper-map

  #+begin_src emacs-lisp
    (use-package swiper
      :bind (("C-s" . swiper)))
  #+end_src

  #+begin_src emacs-lisp
    (use-package counsel
      :bind (("M-x" . counsel-M-x)
             ("C-x b" . counsel-ibuffer)
             ("C-x C-f" . counsel-find-file)
             :map minibuffer-local-map
             ("C-w" . 'ivy-backward-kill-word)
             :map ivy-minibuffer-map
             ("C-w" . 'ivy-backward-kill-word)
             ("C-r" . 'counsel-minibuffer-history))
      :config
      (setq counsel-find-file-at-point t))

    ;; counsel-search will use the package request with this function
    (use-package request
      :defer t)

  #+end_src

* avy
  =(setq avy-background t)= will diminish the background to make the target clearly.

  #+begin_src emacs-lisp
    (use-package avy
      :defer t
      :config
      (setq avy-background t))

  #+end_src

* evil
  it's evil! provide you vim-like ux in emacs.

  #+begin_src emacs-lisp

    (defun show-error-or-doc ()
      "Show errors if flycheck detects errors existed or display the documentation."
      (interactive)
      (if (flycheck-overlay-errors-at (point))
          (flycheck-display-error-at-point)
        (lsp-describe-thing-at-point)))

  #+end_src

  #+begin_src emacs-lisp
    (use-package evil
      :defer 0
      :init
      (setq evil-want-keybinding nil) ;; this will cause some evil keybinding
      ;; of other modes not working when it's set to true
      :config
      (setq evil-want-integration t)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-define-key 'normal prog-mode-map (kbd "C-j") 'evil-scroll-line-down)
      (evil-define-key 'normal prog-mode-map (kbd "C-k") 'evil-scroll-line-up)
      (evil-define-key 'normal prog-mode-map (kbd "g h") 'show-error-or-doc)
      (evil-define-key 'normal prog-mode-map (kbd "U") 'undo-redo)


      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))

      ;; (add-hook 'evil-normal-state-entry-hook 'im-use-eng)
      ;; (add-hook 'evil-insert-state-entry-hook 'im-use-prev)
      ;; (add-hook 'evil-insert-state-exit-hook 'im-remember)
      ;; (add-hook 'evil-emacs-state-entry-hook 'im-use-eng))
  #+end_src

  evil-matchit  make =%= to be able to jump to and back the tag
  evil-collection provides some pre-defined evil key binding for other-modes.

  #+begin_src emacs-lisp
    (use-package evil-matchit
      :after evil
      :config
      (global-evil-matchit-mode 1))

    (use-package evil-collection
      :after evil
      :config
      (delete 'wgrep evil-collection-mode-list)
      (delete 'vterm evil-collection-mode-list)
      (delete 'lispy evil-collection-mode-list)
      (delete 'ivy evil-collection-mode-list)
      (delete 'view evil-collection-mode-list)
      ;; this will bind a global esc key for minibuffer-keyboard-quit so I remove it.
      (setq evil-collection-company-use-tng nil)
      (add-hook 'evil-collection-setup-hook #'(lambda (_mode mode-keymaps &rest _rest)
                                                (when (eq _mode 'docker)
                                                  (evil-define-key 'normal 'docker-container-mode-map (kbd "b") 'docker-container-vterm))))
      (evil-collection-init))
  #+end_src

  evil-nerd-commenter provide the quick comment util functions.

  #+begin_src emacs-lisp
    (use-package evil-nerd-commenter
      :after evil
      :commands evilnc-comment-operator
      :init
      (define-key evil-normal-state-map "gc" 'evilnc-comment-operator))

    (use-package evil-surround
      :after evil
      :config
      (global-evil-surround-mode 1))
  #+end_src

* code folding

  #+begin_src emacs-lisp
    (use-package hideshow
      :hook (prog-mode . hs-minor-mode)
      :commands
      (hs-toggle-hiding
       hs-hide-block
       hs-hide-level
       hs-show-all
       hs-hide-all)
      :config
      (with-eval-after-load 'evil
        (evil-define-key 'normal prog-mode-map (kbd "z z") 'hs-toggle-hiding)))
  #+end_src


  create arbitrary fold not like other package auto detect the program language

  #+begin_src emacs-lisp :tangle no
    (use-package vimish-fold
      :after evil
      :hook (prog-mode . vimish-fold-mode))

    (use-package evil-vimish-fold
      :after vimish-fold
      :hook (prog-mode . evil-vimish-fold-mode))
  #+end_src

* which key mode
  a friendly key shortcut hint.
  #+begin_src emacs-lisp
    (use-package which-key
      :defer 0
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.05)
      (which-key-mode 1))
  #+end_src

* expand-region
  a convenient selection expander.

  #+begin_src emacs-lisp
    (use-package expand-region
      :commands
      (er--expand-region-1)
      :defer t)
  #+end_src

* company
  company-mode setup

  #+begin_notes
  "<return>" is the Return key while emacs runs in a graphical user interface.
  "RET" is the Return key while emacs runs in a terminal. ...
  But the problem is, by binding (kbd "RET") , you are also binding (kbd "C-m")
  #+end_notes

  #+begin_src emacs-lisp
    (use-package company
      :defer 0
      :config
      (setq company-minimum-prefix-length 2)
      (setq company-idle-delay 0.1)
      (setq company-format-margin-function 'company-vscode-dark-icons-margin)
      ;; In evil-collection, it adjust the key binding for the company-mode
      ;; NOTE: Furthermore, it also disable the pre-select behavior when
      ;; showing the completion candidates.
      (define-key company-active-map (kbd "<return>") 'company-complete-selection)
      (global-company-mode 1))
  #+end_src

  NOTE: temporarily disable =company-tabnine= because it consumes lots of cpu.

  #+begin_src emacs-lisp :tangle no
    (use-package company-tabnine
      :config
      (with-eval-after-load 'company
        (add-to-list 'company-backends #'company-tabnine)
        (setq company-tabnine-always-trigger nil)
        (setq company-show-numbers t)
        (setq company-idle-delay 0.1)))
  #+end_src

* provide package

  #+begin_src emacs-lisp
    (provide 'jemacs-ux)
    ;;; jemacs-ux.el ends here
  #+end_src
